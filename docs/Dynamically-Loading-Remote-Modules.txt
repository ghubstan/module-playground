https://github.com/bisq-network/projects/issues/53
https://github.com/bisq-network/projects/issues/53

Research a solution for dynamically loading remote modules #53
--------------------------------------------------------------

We need a model to load on demand what the user is interested to use. E.g. user choose to trade Zcash. 
The Zcash wallet and blockchain module is loaded and the user needs to connect it to their local Zcash 
wallet or install it. The local wallet installation will not be handled by Bisq only the interface 
module(s) which enables to talk to it (e.g. a rpc based interface).


ServiceLoader  -> https://www.baeldung.com/java-spi

ServiceLoader -> https://www.logicbig.com/tutorials/core-java-tutorial/java-se-api/service-loader.html

Nope, looks like ServiceLoader will not work for dynamic loading, only works if spi is on startup classpath?

<dependency>
  <groupId>misq-threadmodel</groupId>
  <artifactId>threadmodel</artifactId>
  <version>0.1-SNAPSHOT</version>
</dependency>


Java Modules, Dynamic Loading -> https://stackoverflow.com/questions/48742354/best-approach-to-dynamically-load-modules-classes-in-java


Java Modules -> https://www.baeldung.com/java-9-modularity

Java Modules -> https://developer.ibm.com/languages/java/tutorials/java-modularity-5/

Java Modules -> https://stackoverflow.com/questions/46112809/is-it-possible-to-load-and-unload-jdk-and-custom-modules-dynamically-in-java-9

Java Modules -> https://stackoverflow.com/questions/45283886/using-different-versions-of-dependencies-in-separated-java-platform-modules

Java Modules -> https://duckduckgo.com/?q=%2Bjava++%2Bmodules+%2Bdynamic+%2Bloading&ia=web

Java Modules -> https://alexkudlick.com/blog/building-modular-java-applications-with-gradle/

Java Modules / Gradle -> https://docs.gradle.org/current/samples/sample_java_modules_with_transform.html

Java Modules / Gradle ->  https://github.com/jjohannes/extra-java-module-info

Split Packages -> https://www.logicbig.com/tutorials/core-java-tutorial/modules/split-packages.html


Github Modules -> https://devcenter.heroku.com/articles/git-submodules

Github Modules -> https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-gradle-registry



Gradle List Deps -> gradle threadmodel:dependencies

// OoOoooo... https://github.com/ConsensusJ/consensusj/blob/a46be66c47bb510a7bc4baf57468130370afe189/consensusj-jsonrpc-cli/build.gradle



What to try out first:

	1)  Start up application built with Java Modules
	
	2)  "Download" more Java Modules to a central location (within app structure)
	
	3)  Use the JDK's ServicerLoader interface to dynamically load the downloaded module(s)
				
				The second part is how to get a right ClassLoader?
				
				If you want to give users the ability to import 
				plugins from custom folders at runtime, you will 
				have to use ClassLoader.
				
	4)  Do NOT use DI
	
	5)  Maybe don't even have to use class loaders
		See 2nd answer in https://stackoverflow.com/questions/48742354/best-approach-to-dynamically-load-modules-classes-in-java



Update:  I am "here", but been busy helping @sqrrm with the atomic trade work.  

I have just begun to look at https://github.com/bisq-network/projects/issues/53.
The 1st thing I can think of for a native java solution is downloading Java Modules from Github and using the JDK's ServicerLoader interface to dynamically load them with appropriate class loaders.




@chimp1984 Yes, before starting to see how api can support atomic trades I was looking how a wepapp might be integrated into the Bisq daemon, and looking at how the Bisq grpc server (daemon) can support bi-directional streaming with the existing grpc CLI and a webapp.

I created a prototype that integrates a `ratpack` (https://github.com/ratpack/ratpack) server.  It required few new dependencies, as you can see here: https://github.com/ghubstan/bisq/commit/cca7fd803fa94efe1ba2f1f523105d0d28eceb99

It would force a guice and netty upgrade.  Bisq and ratpacks dependencies overlap.



Sorry, I was the sluggish one in the meet.  Been too busy to give https://github.com/bisq-network/projects/issues/53 the attention is needed before the meet.  Also sqeamish about phone-meets, being the target of euphemistically called "state actors".  But I gotta work!  Have experience as a working target too ;-)

 


	
